核心方法：org.springframework.context.support.AbstractApplicationContext#refresh

1. prepareRefresh(); 准备刷新的上下文
  1.1 initPropertySources() 初始化属性资源
  1.2 getEnvironment().validateRequiredProperties(); 验证必须属性

2. ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();告诉子类刷新bean工厂
  2.1 this.beanFactory.setSerializationId(getId());
  2.2 getBeanFactory()获取bean工厂

3. prepareBeanFactory(beanFactory);准备bean工厂
  3.1 beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader())); 设置spel表达式解析器
  3.2 beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment())); 设置属性编辑注册器
  3.3 添加BeanPostProcessor[ApplicationContextAwareProcessor]
  主要用于实现了Aware子接口[EnvironmentAware,EmbeddedValueResolverAware,ResourceLoaderAware,ApplicationEventPublisherAware,MessageSourceAware,ApplicationContextAware]的类，初始化前调用aware对应接口方法。
  3.4 对以上6个aware接口忽略依赖。
  3.5 注册科解析的依赖[BeanFactory,ResourceLoader,ApplicationEventPublisher,ApplicationContext]
  3.6 添加BeanPostProcessor[ApplicationListenerDetector]
  用于在bean初始化后，如果是ApplicationListener的实现类，添加到applicationContext中
  
  3.7 如果容器中存在loadTimeWeaver[类加载期织入,是在字节码加载到jvm之前，非运行时aspectj的aop织入],则添加LoadTimeWeaverAwareProcessor 以及 类加载器 ContextTypeMatchClassLoader
  
  3.8 registerSingleton 注册单例bean[environment[ConfigurableEnvironment],systemProperties[Map<String,Object>],systemEnvironment[Map<String,Object>]]
  
4. postProcessBeanFactory(beanFactory); 允许子类自定义beanFoctory的后置处理逻辑

   以web应用为例，会调用org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#postProcessBeanFactory
     添加BeanPostProcessor[WebApplicationContextServletContextAwareProcessor],postProcessBeforeInitialization初始化前设置ServletContext，ServletConfig
	 忽略ServletContextAware依赖接口
	 
5. invokeBeanFactoryPostProcessors(beanFactory); 调用注册的bean factroy processor
   5.1 实现接口BeanFactoryPostProcessor的bean，执行postProcessBeanDefinitionRegistry方法，添加bean定义后，添加到registryProcessors
       [org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer$CachingMetadataReaderFactoryPostProcessor,
        org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer$ConfigurationWarningsPostProcessor]
       实现子接口BeanDefinitionRegistryPostProcessor的bean，添加到regularPostProcessors
	   [org.springframework.boot.context.config.ConfigFileApplicationListener.PropertySourceOrderingPostProcessor#PropertySourceOrderingPostProcessor]
	   
   5.2 对容器中的BeanDefinitionRegistryPostProcessor依次获取，PriorityOrdered, Ordered, and the rest
   进行排序，且执行invokeBeanDefinitionRegistryPostProcessors.
   5.2.1 PriorityOrdered 排序后 ConfigurationClassPostProcessor，执行ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry
   对配置类进行处理，主要调用方法：org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass
   
   --beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class) 包含了创建bean的逻辑，前提是已经放入了bd.
   由此引出了注入bean的三种方式,具体解析的时机是处理ConfigurationClassPostProcessor
             1.@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名
             2.ImportSelector:返回需要导入的组件的全类名数组；
             3.ImportBeanDefinitionRegistrar:手动注册bean到容器中
			 
   5.2.2 Ordered的实现处理
   5.2.3 其他 [org.mybatis.spring.mapper.MapperScannerConfigurer mybatis集成

   (以上三步主要是执行BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry,放入bd定义)

   5.2.4 执行beanfactoryPostProcessor的方法postProcessor.postProcessBeanFactory(beanFactory);
   主要包括2个方法：
   			invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);

   			registryProcessors为
   			0 = {SharedMetadataReaderFactoryContextInitializer$CachingMetadataReaderFactoryPostProcessor@2783}
            1 = {ConfigurationWarningsApplicationContextInitializer$ConfigurationWarningsPostProcessor@3738}
            2 = {ConfigurationClassPostProcessor@3739}
            3 = {MapperScannerConfigurer@3740}

   			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);

   			regularPostProcessors为
            0 = {ConfigFileApplicationListener$PropertySourceOrderingPostProcessor@3736}

   5.2.5 从容器中获取存在的BeanFactoryPostProcessor
       0 = "org.springframework.context.annotation.internalConfigurationAnnotationProcessor" 上面步驟已經處理
       1 = "org.springframework.context.event.internalEventListenerProcessor"
       2 = "propertySourcesPlaceholderConfigurer"
       3 = "org.springframework.boot.context.properties.ConfigurationPropertiesBeanDefinitionValidator"
       4 = "preserveErrorControllerTargetClassPostProcessor"
       5 = "org.mybatis.spring.mapper.MapperScannerConfigurer"   上面步驟已經處理

    依次構建列表 priorityOrderedPostProcessors
               orderedPostProcessors
               nonOrderedPostProcessors


6. registerBeanPostProcessors(beanFactory); 注册拦截bean创建的后置处理器
  实际调用 PostProcessorRegistrationDelegate.registerBeanPostProcessors(ConfigurableListableBeanFactory, AbstractApplicationContext)

   6.1 从容器获取beanPostProcessor 9个
   0 = "org.springframework.context.annotation.internalAutowiredAnnotationProcessor"
   1 = "org.springframework.context.annotation.internalCommonAnnotationProcessor"
   2 = "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor"
   3 = "webServerFactoryCustomizerBeanPostProcessor"
   4 = "errorPageRegistrarBeanPostProcessor"
   5 = "methodValidationPostProcessor"
   6 = "dataSourceInitializerPostProcessor"
   7 = "org.springframework.aop.config.internalAutoProxyCreator"
   8 = "persistenceExceptionTranslationPostProcessor"

   实际容器中已经存在4个,但并不是容器中存在的bean
   0 = {ApplicationContextAwareProcessor@4298}
   1 = {ApplicationListenerDetector@4299}
   2 = {WebApplicationContextServletContextAwareProcessor@4300}
   3 = {ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor@4301}
   同时再注入1个
   BeanPostProcessorChecker

   ((DefaultListableBeanFactory) beanFactory).getBeanPostProcessors() 将得到5个

   总数14个。

   构造PostProcessors列表

   priorityOrderedPostProcessors

    0 = {ConfigurationPropertiesBindingPostProcesso}
    1 = {CommonAnnotationBeanPostProcessor}
    2 = {AutowiredAnnotationBeanPostProcessor}


        ConfigurationPropertiesBindingPostProcessor implements BeanPostProcessor
        处理注解:
        case1: @Component
               @ConfigurationProperties(prefix = "xxx")
               class XXXX

        case2: @Bean
               @ConfigurationProperties(prefix = "xxx")
               class XXXX

        CommonAnnotationBeanPostProcessor extends InitDestroyAnnotationBeanPostProcessor implements InstantiationAwareBeanPostProcessor
        @PostConstruct跟@PreDestroy的实现是在父类InitDestroyAnnotationBeanPostProcessor中实现的。
        @Resource CommonAnnotationBeanPostProcessor 中解析

        AutowiredAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter  implements MergedBeanDefinitionPostProcessor
        就是在实例化某个bean时，对bean中的属性或者方法进行扫描，扫描的是@Autowired和@Value注解，一旦发现方法或者属性上有这些注解，就把属性或者方法封装成AutowiredFieldElement或者AutowiredMethodElement对象，这个对象有一个Member，
        属性描述对象PropertyDescriptor，属性描述对象可以对属性进行反射读和写操作。最后把这些对象封装成InjectionMetadata对象，这些对象封装了类Class和集合，集合里面装了AutowiredFieldElement或者AutowiredMethodElement对象。
        这样AutowiredAnnotationBeanPostProcessor类的装配工作就完成了，在后续IOC，依赖注入，对bean进行依赖注入时就可以根据InjectionMetadata对象里面封装的内容进行属性赋值了。
		
		
		实现了MergedBeanDefinitionPostProcessor的beanPostProcessor为internalPostProcessors
		
		最终添加到容器中的beanPostProcessor为
			0 = {ApplicationContextAwareProcessor@4696} 
			1 = {WebApplicationContextServletContextAwareProcessor@4697} 
			2 = {ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor@4698 ---> InstantiationAwareBeanPostProcessorAdapter - - - > InstantiationAwareBeanPostProcessor } 
			3 = {PostProcessorRegistrationDelegate$BeanPostProcessorChecker@4699} 
			4 = {ConfigurationPropertiesBindingPostProcessor@4700} 
			5 = {AnnotationAwareAspectJAutoProxyCreator@4701} "proxyTargetClass=true; optimize=false; opaque=false; exposeProxy=false; frozen=false"
			6 = {DataSourceInitializerPostProcessor@4702} 
			7 = {MethodValidationPostProcessor@4703} "proxyTargetClass=true; optimize=false; opaque=false; exposeProxy=false; frozen=false"
			8 = {PersistenceExceptionTranslationPostProcessor@4704} "proxyTargetClass=true; optimize=false; opaque=false; exposeProxy=false; frozen=false"
			9 = {WebServerFactoryCustomizerBeanPostProcessor@4705} 
			10 = {ErrorPageRegistrarBeanPostProcessor@4706} 
			11 = {CommonAnnotationBeanPostProcessor@4045} 
			12 = {AutowiredAnnotationBeanPostProcessor@3974} 
			13 = {ApplicationListenerDetector@4669} 
			
7. initMessageSource(); 初始化国际化信息


8. initApplicationEventMulticaster(); 初始化事件分发器


9. onRefresh(); Initialize other special beans in specific context subclasses.


10. registerListeners(); 注册监听器
    0 = {RSocketPortInfoApplicationContextInitializer$Listener@5658} 
	1 = {ServerPortInfoApplicationContextInitializer@5659} 
	2 = {ConditionEvaluationReportLoggingListener$ConditionEvaluationReportListener@5660} 
	3 = {CloudFoundryVcapEnvironmentPostProcessor@5661} 
	4 = {ConfigFileApplicationListener@5662} 
	5 = {AnsiOutputApplicationListener@5663} 
	6 = {LoggingApplicationListener@5664} 
	7 = {ClasspathLoggingApplicationListener@5665} 
	8 = {BackgroundPreinitializer@5666} 
	9 = {DelegatingApplicationListener@5667} 
	10 = {ParentContextCloserApplicationListener@5668} 
	11 = {ClearCachesApplicationListener@5669} 
	12 = {FileEncodingApplicationListener@5670} 
	13 = {LiquibaseServiceLocatorApplicationListener@5671} 
	14 = {SharedMetadataReaderFactoryContextInitializer$SharedMetadataReaderFactoryBean@5672} 
		

11. finishBeanFactoryInitialization(beanFactory); 实例化其他非懒加载的单例bean
   11.1 核心方法 beanFactory.preInstantiateSingletons();
     如果是工厂bean的情况，调用 org.springframework.beans.factory.support.FactoryBeanRegistrySupport#getObjectFromFactoryBean
     -> AbstractAutowireCapableBeanFactory.createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])

        11.1.1 准备方法重写
        mbdToUse.prepareMethodOverrides();
        11.1.2 为bean返回代理类(aopbean的初始化接入点)，如果实例化成功，则直接返回。
        // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.
        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);

        实际是执行InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation

            InstantiationAwareBeanPostProcessor下的 包括 ImportAwareBeanPostProcessor  AnnotationAwareAspectJAutoProxyCreator CommonAnnotationBeanPostProcessor AutowiredAnnotationBeanPostProcessor

            // Candidate constructors for autowiring?
            Constructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);

            SmartInstantiationAwareBeanPostProcessor

        11.1.3 通用创建bean
        Object beanInstance = doCreateBean(beanName, mbdToUse, args);
          11.1.3.1 创建bean实例包装类
            instanceWrapper = createBeanInstance(beanName, mbd, args);
            -> 如果bd存在工厂方法，则调用 instantiateUsingFactoryMethod(beanName, mbd, args)
               determineConstructorsFromBeanPostProcessors，基于SmartInstantiationAwareBeanPostProcessor推导构造方法
               最后使用无参构造方法
               BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd)
               -> 最终调用BeanUtils.instantiateClass(constructorToUse)
                  实际调用Constructor.newInstance

          11.1.3.2
            protected void initBeanWrapper(BeanWrapper bw)
            ->设置 ApplicationConversionService(包含134个内置转换器)
            ->注册自定义编辑器registerCustomEditors(PropertyEditorRegistry registry)
			
		
          11.1.3.3
		    填充bean属性
		    protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) 
			
			-> (实例化后，初始化前)先调用InstantiationAwareBeanPostProcessor的后置处理器方法postProcessAfterInstantiation
			
			   再调用属性赋值InstantiationAwareBeanPostProcessor.postProcessProperties(PropertyValues pvs, Object bean, String beanName)  
			   
			   最后调用属性赋值,PropertyValues为空，则直接返回
			   applyPropertyValues(beanName, mbd, bw, pvs); 
			   
		  11.1.3.4
		     初始化bean
		     exposedObject = initializeBean(beanName, exposedObject, mbd);
			 
			 -> 调用invokeAwareMethods  如果bean是Aware接口的实现类，则调用对应方法
			 [BeanNameAware.setBeanName,BeanClassLoaderAware.setBeanClassLoader,BeanFactoryAware.setBeanFactory] 
			 
			 -> 调用wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
			 循环执行bean后置处理器的初始化前方法：BeanPostProcessor.postProcessBeforeInitialization
			 -> 调用初始化方法：invokeInitMethods(beanName, wrappedBean, mbd);
			   -> InitializingBean的情况，调用((InitializingBean) bean).afterPropertiesSet();
			   -> 调用自定义init方法 invokeCustomInitMethod(beanName, bean, mbd);
			 -> 调用wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
			 循环执行bean后置处理器的初始化前方法：BeanPostProcessor.postProcessAfterInitialization
			 
	      11.1.3.5
		     注册bean作为disposable，如果实现了DisposableBean
		     registerDisposableBeanIfNecessary(beanName, bean, mbd);
			 
        11.1.4 SmartInitializingSingleton.afterSingletonsInstantiated
		     如果实现了该接口，则执行，常见的例如放入自定义缓存等(当前状态所有bean都初始化完毕)
			 
			 
12 finishRefresh(); 发布相应事件
	-> org.springframework.context.support.AbstractApplicationContext#finishRefresh
	  ->    // Clear context-level resource caches (such as ASM metadata from scanning).
			clearResourceCaches();

			// Initialize lifecycle processor for this context. 没有，则创建一个defaultLifecycleProcessor
			initLifecycleProcessor();

			// Propagate refresh to lifecycle processor first.
			getLifecycleProcessor().onRefresh();

			// Publish the final event.
			publishEvent(new ContextRefreshedEvent(this));

			// Participate in LiveBeansView MBean, if active.
			LiveBeansView.registerApplicationContext(this);
	-> org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#startWebServer
	
	-> 发布容器启动完毕事件 publishEvent(new ServletWebServerInitializedEvent(webServer, this));